# This script works with the meso model positioned correctly with respect to the micro-model. 

import os;
global deform_matrix_brick;
global upmult_factor;
global finalfile;
global templatef;

#THIS FILE TAKES A MESO .INP FILE AND WRITES DISPLACEMENTS TO IT.
#This file generates "tempfile.txt" which can be deleted after the
#script has run.

#The displacement information is organized the following format:
# [ [x1, y1, z1], [x2, y2, z2],...,[xi, yi, zi], ...]
#where xi,yi,zi are the x,y,z displacements of node of the
#macro element that interfaces with the meso cube.

#Macro deformations or displacements in the order of the nodes of the macro element
deform_matrix_brick =[
[81.6642132,-1181.50376,-573.547033],
[72.9777894,-1222.20581,-654.857839],
[135.365597,-1303.0722,-659.670157],
[135.851966,-1263.16375,-586.180307],
[43.535747,-1188.04479,-655.555865],
[29.4630645,-1229.02007,-737.943279],
[97.5616858,-1313.44167,-742.137665],
[95.9457684,-1270.5283,-667.15834]##No comma here, or errors will happen
]
deform_macro =[
[3457,81.6642132,-1181.50376,-573.547033],
[3459,72.9777894,-1222.20581,-654.857839],
[3714,135.365597,-1303.0722,-659.670157],
[3713,135.851966,-1263.16375,-586.180307],
[3435,43.535747,-1188.04479,-655.555865],
[3437,29.4630645,-1229.02007,-737.943279],
[3689,97.5616858,-1313.44167,-742.137665],
[3688,95.9457684,-1270.5283,-667.15834]]

#Macro nodes in meso order
mac_inMes = [5,1,0,4,6,2,3,7]

#Macro displacements in the order of the nodes (without labels) of the meso element
deform_corner_mesow =[deform_matrix_brick[i] for i in mac_inMes]

#Macro displacements in the order of the nodes (with labels) of the meso element
deform_corner_meso =[deform_macro[i] for i in mac_inMes]

##END deform matrix

##Dialogue
print("\n")
print("\033[32mTHIS IS THE FILE THAT WILL CONDUCT MACRO-MESO INTERPOLATION\033[0m\n\n\n")

print("\033[32mTo change displacements, you'll need to edit this file.\nDefault displacements taken from Keyak.\033[0m\n\n\n")

print("\033[32mPlease follow the prompts --\033[0m")
print("""\033[32mIf asked for a file name, please enter the FULL PATH unless\nthe file exists in the same directory as this script\033[0m\n""")

g = ""

#g = input("\033[32mInput name of meso input file (include .inp)\033[0m: ")
g = sys.arg[1]

f = ""

print("\033[32mInput name of new file (include .inp):\033[0m ")
#f = input("\033[32mNote, it can't be the same as input file: \033[0m: ")
f = sys.arg[2]

print("\033[32mPlease enter the multiplication factor (for example, for Joyce can be 10**6).\033[0m: ")
print("\033[32mNOTE 10^6 has no meaning in python, you need to enter it as 10**6.\033[0m: ")
#upmult_factor = eval(input("\033[32mEnter 1 if you do not want a scaling factor, not 0: \033[0m: "))
upmult_factor = int(sys.argv[3])

print("\033[32mYour multiplication factor is\033[0m: ", upmult_factor)
print("\033[32m\n\n\n\nNOW RUNNING INTERPOLATION.... PLASE WAIT\n\n\033[0m")

#nodecheckfile = input("\033[32mInput the name of the NODECHECK output file (include .inp)\033[0m: ")
nodecheckfile = sys.argv[4]
nodecheck = open(nodecheckfile, 'w')

##Making a list of nodes from the meso model

from math import *

#This is the factor that all displacements are multiplied by.
#in the case of Joyce, she gave us displacements in meters, we multiply
#by 10^6 to get micrometers to match the micro-meter scale in the
#abaqus file.
##DO NOT SET TO 0. If you want no up-multiplication, set to 1.

#New file to be generated with displacements. KEEP THE QUOTES:
finalfile = f

#Template file (the meso file WITHOUT displacements as generated by jnl):
templatef = g

def read_nodes_1(lines):
    """
    This function takes a list of lines and returns a list containing sublists.
    Each sublist contains a node number, x coordinate, y coordinate and
    z coordinate.
    """
    ret_lst = []
    take = False
    for line in lines:
        if take and "*" in line:
            break
        if take:
            lst = []
            lst.append(int(line.split(",")[0].lstrip().rstrip()))
            for str in line.split(",")[1:]:
                coordinate = float(str.strip("\n").lstrip().rstrip())
                lst.append(coordinate)
            ret_lst.append(lst)
        if "*Node" in line:
            take = True
    return(ret_lst)

global nodes_to_deform

nodes_to_deform = []

#nodeKeeper = []
def pull_meso_nodes(meso):
    running = False
    node_numb = ""
    x_hat = ""
    y_hat = ""
    z_hat = ""
    count = 0
    prev_coma = 0
    for line in meso:

        node_numb = ""
        x_hat = ""
        y_hat = ""
        z_hat = ""
        count = 0
        prev_coma = 0
        if running:
            for letter in range(len(line)):
                if line[0] == "*":
                    break
                if line[letter] == " ":
                    prev_coma = letter

                if count == 3 and running:##ONLY NEED RUNNING IF NOT RUNNING OFF DUMPED FILE
                    z_hat = float(line[(prev_coma + 1):])##:end of line, not letter
                    #print(str(z_hat) + "<---- Z")
                    count +=1

                if line[letter] == "," and count == 2 and running:
                    y_hat = float(line[(prev_coma + 1):letter])
                    #print(str(y_hat) + "<---- Y")
                    count +=1

                if line[letter] == "," and count == 1 and running:
                    x_hat = float(line[(prev_coma + 1):letter])
                    #print(str(x_hat) + "<---- X")
                    count +=1

                if line[letter] == "," and count == 0 and running:
                    node_numb = int(line[0:(letter)])
                    #print(str(node_numb) + " <-- NODE")
                    count += 1
        if "*" in line:
            if "Node" in line:
                running = True
                #print("Node hit")
            else:
                running = False
        if node_numb != "":
            ALL_meso_nodes.append([node_numb, x_hat, y_hat, z_hat])

    meso.seek(0)

global running_node
global hit_M
global ALL_micro_nodes
#global nodes_to_deform##HOLDS the nodes to be deformed
global ALL_meso_nodes
global meso_node_set
global final_def_set
global FULL_meso_elset
global micro_part_count
FULL_meso_elset = []
micro_part_count = 0

final_def_set = []

running_node = False
hit_M = False

#nodes_to_deform = []##HOLDS the nodes to be deformed
ALL_micro_nodes = []
ALL_meso_nodes = []

#END of node listing

#Interpolation
def function_final():
#labels and coordinates of corner nodes in meso
    #For meso meso2i - correct
    #node1 = [3721,2.879800049E+03,-118.5,0.]
    #node2 = [3661,2.879800049E+03,2.8815E+03,0.]
    #node3 = [226921,-120.200012,2.8815E+03,0.]
    #node4 = [226981,-120.200012,-118.5,0.]
    #node5 = [61,2.879800049E+03,-118.5,3.E+03]
    #node6 = [1,2.879800049E+03,2.8815E+03,3.E+03]
    #node7 = [223261,-120.200012,2.8815E+03,3.E+03]
    #node8 = [223321,-120.200012,-118.5,3.E+03]
    #For new meso2e - correct
    #node1 = [27687,2.870199966E+03,-368.1,0.]
    #node2 = [31577,2.870199966E+03,2.8689E+03,0.]
    #node3 = [3892,-370.199982,2.8689E+03,0.]
    #node4 = [2,-370.199982,-368.1,0.]
    #node5 = [27991,2.870199966E+03,-368.1,3.E+03]
    #node6 = [31881,2.870199966E+03,2.8689E+03,3.E+03]
    #node7 = [4196,-370.199982,2.8689E+03,3.E+03]
    #node8 = [306,-370.199982,-368.1,3.E+03]
    ##For new meso2c - correct
    #node1 = [30005,2.870199951E+03,-368.5,0.]
    #node2 = [33895,2.870199951E+03,2.8685E+03,0.]
    #node3 = [3892,-370.199982,2.8685E+03,0.]
    #node4 = [2,-370.199982,-368.5,0.]
    #node5 = [30309,2.870199951E+03,-368.5,3000.]
    #node6 = [34199,2.870199951E+03,2.8685E+03,3000.]
    #node7 = [4196,-370.199982,2.8685E+03,3000.]
    #node8 = [306,-370.199982,-368.5,3000.]
    ##For new meso May 8
    node1 = [429213, 2.879800049E+03, -118.5,0]
    node2 = [443176, 2.879800049E+03, 2.8815E+03,0]
    node3 = [13096, -120.200012, 2.8815E+03,0]
    node4 = [5, -120.200012, -118.5,0]
    node5 = [429698, 2.879800049E+03, -118.5,3000]
    node6 = [443679, 2.879800049E+03, 2.8815E+03,3000]
    node7 = [13575, -120.200012, 2.8815E+03,3000]
    node8 = [502, -120.200012, -118.5,3000]
    ##For previous meso model
    #node1 = [382178, 2879.800049, -118.5, 0] 
    #node2 = [394160, 2879.800049, 2881.5, 0]
    #node3 = [10497, -120.199974, 2881.5, 0]
    #node4 = [3, -120.199974, -118.5, 0]
    #node5 = [382553, 2879.800049, -118.5, 3000]
    #node6 = [394538, 2879.800049, 2881.5, 3000]
    #node7 = [10872, -120.199974, 2881.5, 3000]
    #node8 = [380, -120.199974, -118.5, 3000]

    hitt = False
    for line in meso_:
        if "*Instance" in line:
            hitt = True
            continue
        if hitt == True:
            if "*End" in line:
                (tx, ty, tz) = (0.0, 0.0, 0.0)
                break
            lst1 = line.split(",")
            (tx, ty, tz) = (float(lst1[0]), float(lst1[1]), float(lst1[2]))
            break


    macro_node_lst = [3457,3459,3714,3713,3435,3437,3689,3688]
    order_lst = [0,1,2,3,4,5,6,7]
    nodecheck.write("The input macro node (labels and displacements) in meso order\n")
    
    #for num in mac_inMes:  #order_lst:
        #nodecheck.write(str(macro_node_lst[num])+" ")
        #nodecheck.write(str(deform_matrix_brick[num])+"\n")
        #nodecheck.write(str(deform_macro[num])+"\n")
        
    for num in order_lst:    
        nodecheck.write(str(deform_corner_meso[num])+"\n")
    
    #g,h,r correspond to y,-x,z because our element numeration is rotated -90 degrees around the z axis in comparison to the formulae in Abaqus Theory manual. 

    h_hat = 0
    g_hat = 0
    r_hat = 0

    x_hat = 0
    y_hat = 0
    z_hat = 0
    node_numb = 0


    nodecheck.write("\n\nThe displacements for the corner meso nodes (after interpolation) are\n")
    nodecheck_lst = []
	
	#To check a few nodes un the surface of the meso
	#mynodes = [333,2347]

    for a_node in ALL_meso_nodes:

        node_numb = a_node[0]
		
    #To check a few nodes
	    #if node_numb not in mynodes:
            #break		
		
        x_hat = a_node[1]+tx
        y_hat = a_node[2]+ty
        z_hat = a_node[3]+tz

        #There are no nodes below the surface nodes in any direction. We subtract/add 3um in each direction to ensure that nodes are not missed for small decimal differences
        if (x_hat <= node7[1]+3) or (x_hat >= node1[1]-3) or (y_hat <= node1[2]+3) or (y_hat >= node7[2]-3) or (z_hat <= node1[3]+3) or (z_hat >= node7[3]-3):


            h_hat = (2*x_hat - node1[1] - node4[1])/(node1[1] - node4[1])   #x
            g_hat = (2*y_hat - node3[2] - node4[2])/(node3[2] - node4[2])   #y
            r_hat = (2*z_hat - node8[3] - node4[3])/(node8[3] - node4[3])   #z

            if r_hat > 1:
                r_hat = 1

            if r_hat < -1:
                r_hat = -1

            if h_hat > 1:
                h_hat = 1

            if h_hat < -1:
                h_hat = -1

            if g_hat > 1:
                g_hat = 1

            if g_hat < -1:
                g_hat = -1
				
            int_li = [3,2,1,0,7,6,5,4] #[0,1,2,3,4,5,6,7] #[3,0,1,2,7,4,5,6]
	    
            deform_i = 1/8*(1-g_hat)*(1-h_hat)*(1-r_hat)*deform_corner_mesow[int_li[0]][0] +\
                       1/8*(1+g_hat)*(1-h_hat)*(1-r_hat)*deform_corner_mesow[int_li[1]][0] +\
                       1/8*(1+g_hat)*(1+h_hat)*(1-r_hat)*deform_corner_mesow[int_li[2]][0] +\
                       1/8*(1-g_hat)*(1+h_hat)*(1-r_hat)*deform_corner_mesow[int_li[3]][0] +\
                       1/8*(1-g_hat)*(1-h_hat)*(1+r_hat)*deform_corner_mesow[int_li[4]][0] +\
                       1/8*(1+g_hat)*(1-h_hat)*(1+r_hat)*deform_corner_mesow[int_li[5]][0] +\
                       1/8*(1+g_hat)*(1+h_hat)*(1+r_hat)*deform_corner_mesow[int_li[6]][0] +\
                       1/8*(1-g_hat)*(1+h_hat)*(1+r_hat)*deform_corner_mesow[int_li[7]][0]

            deform_j = 1/8*(1-g_hat)*(1-h_hat)*(1-r_hat)*deform_corner_mesow[int_li[0]][1] +\
                       1/8*(1+g_hat)*(1-h_hat)*(1-r_hat)*deform_corner_mesow[int_li[1]][1] +\
                       1/8*(1+g_hat)*(1+h_hat)*(1-r_hat)*deform_corner_mesow[int_li[2]][1] +\
                       1/8*(1-g_hat)*(1+h_hat)*(1-r_hat)*deform_corner_mesow[int_li[3]][1] +\
                       1/8*(1-g_hat)*(1-h_hat)*(1+r_hat)*deform_corner_mesow[int_li[4]][1] +\
                       1/8*(1+g_hat)*(1-h_hat)*(1+r_hat)*deform_corner_mesow[int_li[5]][1] +\
                       1/8*(1+g_hat)*(1+h_hat)*(1+r_hat)*deform_corner_mesow[int_li[6]][1] +\
                       1/8*(1-g_hat)*(1+h_hat)*(1+r_hat)*deform_corner_mesow[int_li[7]][1]

            deform_k = 1/8*(1-g_hat)*(1-h_hat)*(1-r_hat)*deform_corner_mesow[int_li[0]][2] +\
                       1/8*(1+g_hat)*(1-h_hat)*(1-r_hat)*deform_corner_mesow[int_li[1]][2] +\
                       1/8*(1+g_hat)*(1+h_hat)*(1-r_hat)*deform_corner_mesow[int_li[2]][2] +\
                       1/8*(1-g_hat)*(1+h_hat)*(1-r_hat)*deform_corner_mesow[int_li[3]][2] +\
                       1/8*(1-g_hat)*(1-h_hat)*(1+r_hat)*deform_corner_mesow[int_li[4]][2] +\
                       1/8*(1+g_hat)*(1-h_hat)*(1+r_hat)*deform_corner_mesow[int_li[5]][2] +\
                       1/8*(1+g_hat)*(1+h_hat)*(1+r_hat)*deform_corner_mesow[int_li[6]][2] +\
                       1/8*(1-g_hat)*(1+h_hat)*(1+r_hat)*deform_corner_mesow[int_li[7]][2]	
			#print(h_hat,node_numb, deform_i, deform_j, deform_k)
            final_def_set.append([node_numb, deform_i, deform_j, deform_k])


        else:
            pass


    dump_bakup = open("tempfile.txt", 'w')
    dump_bakup.write("INSTANCE\n")
    for a_lst in final_def_set:
        dump_bakup.write(str(a_lst) + "\n")

    dump_bakup.close()

	
    node_list = [node1, node2, node3, node4, node5, node6, node7, node8]
    for node in node_list:
        for int_node in final_def_set:
            if node[0] == int_node[0]:
                nodecheck.write(str(int_node[0]).ljust(10))
                nodecheck.write(str(int_node[1:])+"\n")
            
    #Count the number of interpolated nodes and the number of unique nodes in the 6 surface sets.
    nodecheck.write("\n\nThe number of interpolated nodes is %s" % len(final_def_set))
    surface_nsets = ["SET-XY-LOWZ", "SET-XY-TOPZ", "SET-XZ-LOWY", "SET-XZ-TOPY", "SET-YZ-LOWX", "SET-YZ-TOPX"]
    take = False
    unique_nodes = []
    for line in meso_:
        if take and "*" in line:
            take = False
        if not take and "*Nset, nset=" in line:
            for nset in surface_nsets:
                if nset in line:
                    take = True
                    break
            continue
        if take:
            nodes = []
            for str_ in line.split(","):
                nodes.append(str_.lstrip().rstrip())
            for node in nodes:
                if node not in unique_nodes:
                    unique_nodes.append(node)
    nodecheck.write("\n\nThe number of unique surface nodes (calculated from the 6 surface nsets) is %s" % len(unique_nodes))
    nodecheck.close()
    

def fun(dumpfile, templatefile):
    template = open(templatefile)
    dump = open(dumpfile, 'w')
    source = open("tempfile.txt")

    all_defs = []
    for line in source:
        if "INSTANCE" in line:
            pass
        else:
            all_defs.append(eval(line))

    source.close()

    hit = False
    written = False
    runnin = True

    for line in template:
        if "** Name: Disp-BC-1 Type: Displacement/Rotation" in line:
            runnin = False

        if "** ----------------------------------------------------------------" in line:
            runnin = True
            
        if "1., 1., 1e-05, 1." in line:
            pass

        else:
            if runnin:
                if written:
                    if line[0] != " ":
                        if "** LOADS" not in line:
                            if "*BOUNDARY, OP=MOD, TYPE=DISPLACEMENT" not in line:
                                dump.write(line)
                                continue
                if "** LOADS" not in line:
                    if "*BOUNDARY, OP=MOD, TYPE=DISPLACEMENT" not in line:
                        dump.write(line)

        if "*Static" in line:
            hit = True

        if hit and not written:
            hit = False
            written = True
            dump.write("** LOADS\n*BOUNDARY, OP=MOD, TYPE=DISPLACEMENT\n")
            for elm in all_defs:
                dump.write("WHOLE-1." + (str(int(elm[0])) + ", ").rjust(15)+ "1,  1,  " + str(elm[1]*upmult_factor).ljust(15) + "\n")
                dump.write("WHOLE-1." + (str(int(elm[0])) + ", ").rjust(15)+ "2,  2,  " + str(elm[2]*upmult_factor).ljust(15) + "\n")
                dump.write("WHOLE-1." + (str(int(elm[0])) + ", ").rjust(15)+ "3,  3,  " + str(elm[3]*upmult_factor).ljust(15) + "\n")


    #print(len(all_defs));
    dump.close()
    template.close()


    print("\033[32mDone with interpolation!\033[0m")

mes = templatef
meso = open(mes)
pull_meso_nodes(meso)
meso = open(mes)
meso_ = meso.readlines()
ALL_meso_nodes = read_nodes_1(meso_)
def_mat = []
function_final();
fun(finalfile, templatef);

#print("\033[32mNOW PUSHING FILES TO SDSC \n\033[0m")
#c = 0
#for letter in range(len(f)):
#    if f[letter] == ".":
#        c = letter

##username = input("\033[32mPlease enter your SDSC user name: \033[0m")

#cmdfile = """#!/bin/bash
#PBS -N PBStest
#PBS -l nodes=1:ppn=8:abaqus
#PBS -l walltime=04:00:00
#PBS -o {0}.out
#PBS -e {0}.err
#PBS -m e
#PBS -M {1}@sdsc.edu
#PBS -V
#PBS -q normal
#echo "running on  `cat $PBS_NODEFILE`"
#date
#source /etc/profile.d/modules.sh
#module load abaqus
#cd /home/{1}/ABAQUS/
#abq692.exe job={0} input={0} scratch=/scratch/$USER/$PBS_JOBID cpus=8 mp_mode=threads memory=48000mb interactive""".format(f[0:c], username)

#cmdfilename = f[0:c] + ".cmd"

#cmdfiles = open(cmdfilename, 'w')

#cmdfiles.write(cmdfile)

#cmdfiles.close()

#print("\033[32mNow pushing the file with interpolated displacements AND the necessary cmd file to sdsc....\033[0m")
#print("\033[32mENTER YOUR SDSC PASSWORD\033[0m: ")

#os.system("scp {1} {2} {0}@trestles.sdsc.edu:/home/{0}/ABAQUS/".format(username, cmdfilename, f))

#print("\n\n\n\n\033[32mDONE. The files exist in your home/{0}/ABAQUS/ directory\033[0m".format(username))
#print("\033[32mYou'll have to log onto sdsc and do the qsub manually\033[0m")

print("\n\n\n\n\033[32mDONE. The files exist in your directory.")
